#=
Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

=#

using Printf

function get_whole_divisors(num)
    # returns the number of whole divisors of num

    number_of_divisors = 0
    if num == 6 # it's fine I don't care about num <= 6
        return (4)
    elseif num == 1
        return (1)
    end
    for i in 1:1:ceil(Int, âˆš(num))
        if num%i == 0
            number_of_divisors += 2
        end
    end
    return (number_of_divisors)
end

function get_nth_triangle_num(n)
    # returns the "n"th triangle number

    triangle_num = 0
    for i in 1:1:n
        triangle_num += i
    end
    return(triangle_num)
end

function divisors_triangle_nums(num_divisors)
    # returns the first triangle number with at least "num_divisors" divisors

    current_divisor_num, n, nth_triangle = 1, 1, 1
    while current_divisor_num <= num_divisors
        nth_triangle = get_nth_triangle_num(n)
        current_divisor_num = get_whole_divisors(nth_triangle)
        #@printf("[%s, %s], ", nth_triangle, current_divisor_num) #leaving this in because it's an example of how to print stuff
        n += 1
    end
    return (nth_triangle)
end

divisors_triangle_nums(500)